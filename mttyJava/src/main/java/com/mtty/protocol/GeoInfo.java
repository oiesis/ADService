/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.mtty.protocol;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class GeoInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1321966105771144087L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GeoInfo\",\"namespace\":\"com.mtty.protocol\",\"fields\":[{\"name\":\"latitude\",\"type\":\"string\"},{\"name\":\"longitude\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"int\"},{\"name\":\"province\",\"type\":\"int\"},{\"name\":\"city\",\"type\":\"int\"},{\"name\":\"district\",\"type\":\"int\"},{\"name\":\"street\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence latitude;
  @Deprecated public java.lang.CharSequence longitude;
  @Deprecated public int country;
  @Deprecated public int province;
  @Deprecated public int city;
  @Deprecated public int district;
  @Deprecated public int street;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public GeoInfo() {}

  /**
   * All-args constructor.
   */
  public GeoInfo(java.lang.CharSequence latitude, java.lang.CharSequence longitude, java.lang.Integer country, java.lang.Integer province, java.lang.Integer city, java.lang.Integer district, java.lang.Integer street) {
    this.latitude = latitude;
    this.longitude = longitude;
    this.country = country;
    this.province = province;
    this.city = city;
    this.district = district;
    this.street = street;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return latitude;
    case 1: return longitude;
    case 2: return country;
    case 3: return province;
    case 4: return city;
    case 5: return district;
    case 6: return street;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: latitude = (java.lang.CharSequence)value$; break;
    case 1: longitude = (java.lang.CharSequence)value$; break;
    case 2: country = (java.lang.Integer)value$; break;
    case 3: province = (java.lang.Integer)value$; break;
    case 4: city = (java.lang.Integer)value$; break;
    case 5: district = (java.lang.Integer)value$; break;
    case 6: street = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'latitude' field.
   */
  public java.lang.CharSequence getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.CharSequence value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   */
  public java.lang.CharSequence getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.CharSequence value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'country' field.
   */
  public java.lang.Integer getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.Integer value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'province' field.
   */
  public java.lang.Integer getProvince() {
    return province;
  }

  /**
   * Sets the value of the 'province' field.
   * @param value the value to set.
   */
  public void setProvince(java.lang.Integer value) {
    this.province = value;
  }

  /**
   * Gets the value of the 'city' field.
   */
  public java.lang.Integer getCity() {
    return city;
  }

  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.Integer value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'district' field.
   */
  public java.lang.Integer getDistrict() {
    return district;
  }

  /**
   * Sets the value of the 'district' field.
   * @param value the value to set.
   */
  public void setDistrict(java.lang.Integer value) {
    this.district = value;
  }

  /**
   * Gets the value of the 'street' field.
   */
  public java.lang.Integer getStreet() {
    return street;
  }

  /**
   * Sets the value of the 'street' field.
   * @param value the value to set.
   */
  public void setStreet(java.lang.Integer value) {
    this.street = value;
  }

  /**
   * Creates a new GeoInfo RecordBuilder.
   * @return A new GeoInfo RecordBuilder
   */
  public static com.mtty.protocol.GeoInfo.Builder newBuilder() {
    return new com.mtty.protocol.GeoInfo.Builder();
  }
  
  /**
   * Creates a new GeoInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GeoInfo RecordBuilder
   */
  public static com.mtty.protocol.GeoInfo.Builder newBuilder(com.mtty.protocol.GeoInfo.Builder other) {
    return new com.mtty.protocol.GeoInfo.Builder(other);
  }
  
  /**
   * Creates a new GeoInfo RecordBuilder by copying an existing GeoInfo instance.
   * @param other The existing instance to copy.
   * @return A new GeoInfo RecordBuilder
   */
  public static com.mtty.protocol.GeoInfo.Builder newBuilder(com.mtty.protocol.GeoInfo other) {
    return new com.mtty.protocol.GeoInfo.Builder(other);
  }
  
  /**
   * RecordBuilder for GeoInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GeoInfo>
    implements org.apache.avro.data.RecordBuilder<GeoInfo> {

    private java.lang.CharSequence latitude;
    private java.lang.CharSequence longitude;
    private int country;
    private int province;
    private int city;
    private int district;
    private int street;

    /** Creates a new Builder */
    private Builder() {
      super(com.mtty.protocol.GeoInfo.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mtty.protocol.GeoInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.latitude)) {
        this.latitude = data().deepCopy(fields()[0].schema(), other.latitude);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.longitude)) {
        this.longitude = data().deepCopy(fields()[1].schema(), other.longitude);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.country)) {
        this.country = data().deepCopy(fields()[2].schema(), other.country);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.province)) {
        this.province = data().deepCopy(fields()[3].schema(), other.province);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.city)) {
        this.city = data().deepCopy(fields()[4].schema(), other.city);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.district)) {
        this.district = data().deepCopy(fields()[5].schema(), other.district);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.street)) {
        this.street = data().deepCopy(fields()[6].schema(), other.street);
        fieldSetFlags()[6] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing GeoInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mtty.protocol.GeoInfo other) {
            super(com.mtty.protocol.GeoInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.latitude)) {
        this.latitude = data().deepCopy(fields()[0].schema(), other.latitude);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.longitude)) {
        this.longitude = data().deepCopy(fields()[1].schema(), other.longitude);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.country)) {
        this.country = data().deepCopy(fields()[2].schema(), other.country);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.province)) {
        this.province = data().deepCopy(fields()[3].schema(), other.province);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.city)) {
        this.city = data().deepCopy(fields()[4].schema(), other.city);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.district)) {
        this.district = data().deepCopy(fields()[5].schema(), other.district);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.street)) {
        this.street = data().deepCopy(fields()[6].schema(), other.street);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.CharSequence getLatitude() {
      return latitude;
    }

    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public com.mtty.protocol.GeoInfo.Builder setLatitude(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.latitude = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public com.mtty.protocol.GeoInfo.Builder clearLatitude() {
      latitude = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.CharSequence getLongitude() {
      return longitude;
    }

    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public com.mtty.protocol.GeoInfo.Builder setLongitude(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.longitude = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public com.mtty.protocol.GeoInfo.Builder clearLongitude() {
      longitude = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.Integer getCountry() {
      return country;
    }

    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public com.mtty.protocol.GeoInfo.Builder setCountry(int value) {
      validate(fields()[2], value);
      this.country = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public com.mtty.protocol.GeoInfo.Builder clearCountry() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'province' field.
      * @return The value.
      */
    public java.lang.Integer getProvince() {
      return province;
    }

    /**
      * Sets the value of the 'province' field.
      * @param value The value of 'province'.
      * @return This builder.
      */
    public com.mtty.protocol.GeoInfo.Builder setProvince(int value) {
      validate(fields()[3], value);
      this.province = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'province' field has been set.
      * @return True if the 'province' field has been set, false otherwise.
      */
    public boolean hasProvince() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'province' field.
      * @return This builder.
      */
    public com.mtty.protocol.GeoInfo.Builder clearProvince() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.Integer getCity() {
      return city;
    }

    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public com.mtty.protocol.GeoInfo.Builder setCity(int value) {
      validate(fields()[4], value);
      this.city = value;
      fieldSetFlags()[4] = true;
      return this; 
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public com.mtty.protocol.GeoInfo.Builder clearCity() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'district' field.
      * @return The value.
      */
    public java.lang.Integer getDistrict() {
      return district;
    }

    /**
      * Sets the value of the 'district' field.
      * @param value The value of 'district'.
      * @return This builder.
      */
    public com.mtty.protocol.GeoInfo.Builder setDistrict(int value) {
      validate(fields()[5], value);
      this.district = value;
      fieldSetFlags()[5] = true;
      return this; 
    }

    /**
      * Checks whether the 'district' field has been set.
      * @return True if the 'district' field has been set, false otherwise.
      */
    public boolean hasDistrict() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'district' field.
      * @return This builder.
      */
    public com.mtty.protocol.GeoInfo.Builder clearDistrict() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'street' field.
      * @return The value.
      */
    public java.lang.Integer getStreet() {
      return street;
    }

    /**
      * Sets the value of the 'street' field.
      * @param value The value of 'street'.
      * @return This builder.
      */
    public com.mtty.protocol.GeoInfo.Builder setStreet(int value) {
      validate(fields()[6], value);
      this.street = value;
      fieldSetFlags()[6] = true;
      return this; 
    }

    /**
      * Checks whether the 'street' field has been set.
      * @return True if the 'street' field has been set, false otherwise.
      */
    public boolean hasStreet() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'street' field.
      * @return This builder.
      */
    public com.mtty.protocol.GeoInfo.Builder clearStreet() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public GeoInfo build() {
      try {
        GeoInfo record = new GeoInfo();
        record.latitude = fieldSetFlags()[0] ? this.latitude : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.longitude = fieldSetFlags()[1] ? this.longitude : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.country = fieldSetFlags()[2] ? this.country : (java.lang.Integer) defaultValue(fields()[2]);
        record.province = fieldSetFlags()[3] ? this.province : (java.lang.Integer) defaultValue(fields()[3]);
        record.city = fieldSetFlags()[4] ? this.city : (java.lang.Integer) defaultValue(fields()[4]);
        record.district = fieldSetFlags()[5] ? this.district : (java.lang.Integer) defaultValue(fields()[5]);
        record.street = fieldSetFlags()[6] ? this.street : (java.lang.Integer) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
