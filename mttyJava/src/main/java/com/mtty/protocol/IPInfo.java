/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.mtty.protocol;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class IPInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2130047872074842327L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"IPInfo\",\"namespace\":\"com.mtty.protocol\",\"fields\":[{\"name\":\"ipv4\",\"type\":\"int\"},{\"name\":\"ipv6\",\"type\":{\"type\":\"array\",\"items\":\"int\"}},{\"name\":\"proxy\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int ipv4;
  @Deprecated public java.util.List<java.lang.Integer> ipv6;
  @Deprecated public java.lang.CharSequence proxy;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public IPInfo() {}

  /**
   * All-args constructor.
   */
  public IPInfo(java.lang.Integer ipv4, java.util.List<java.lang.Integer> ipv6, java.lang.CharSequence proxy) {
    this.ipv4 = ipv4;
    this.ipv6 = ipv6;
    this.proxy = proxy;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ipv4;
    case 1: return ipv6;
    case 2: return proxy;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ipv4 = (java.lang.Integer)value$; break;
    case 1: ipv6 = (java.util.List<java.lang.Integer>)value$; break;
    case 2: proxy = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ipv4' field.
   */
  public java.lang.Integer getIpv4() {
    return ipv4;
  }

  /**
   * Sets the value of the 'ipv4' field.
   * @param value the value to set.
   */
  public void setIpv4(java.lang.Integer value) {
    this.ipv4 = value;
  }

  /**
   * Gets the value of the 'ipv6' field.
   */
  public java.util.List<java.lang.Integer> getIpv6() {
    return ipv6;
  }

  /**
   * Sets the value of the 'ipv6' field.
   * @param value the value to set.
   */
  public void setIpv6(java.util.List<java.lang.Integer> value) {
    this.ipv6 = value;
  }

  /**
   * Gets the value of the 'proxy' field.
   */
  public java.lang.CharSequence getProxy() {
    return proxy;
  }

  /**
   * Sets the value of the 'proxy' field.
   * @param value the value to set.
   */
  public void setProxy(java.lang.CharSequence value) {
    this.proxy = value;
  }

  /**
   * Creates a new IPInfo RecordBuilder.
   * @return A new IPInfo RecordBuilder
   */
  public static com.mtty.protocol.IPInfo.Builder newBuilder() {
    return new com.mtty.protocol.IPInfo.Builder();
  }
  
  /**
   * Creates a new IPInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new IPInfo RecordBuilder
   */
  public static com.mtty.protocol.IPInfo.Builder newBuilder(com.mtty.protocol.IPInfo.Builder other) {
    return new com.mtty.protocol.IPInfo.Builder(other);
  }
  
  /**
   * Creates a new IPInfo RecordBuilder by copying an existing IPInfo instance.
   * @param other The existing instance to copy.
   * @return A new IPInfo RecordBuilder
   */
  public static com.mtty.protocol.IPInfo.Builder newBuilder(com.mtty.protocol.IPInfo other) {
    return new com.mtty.protocol.IPInfo.Builder(other);
  }
  
  /**
   * RecordBuilder for IPInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<IPInfo>
    implements org.apache.avro.data.RecordBuilder<IPInfo> {

    private int ipv4;
    private java.util.List<java.lang.Integer> ipv6;
    private java.lang.CharSequence proxy;

    /** Creates a new Builder */
    private Builder() {
      super(com.mtty.protocol.IPInfo.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mtty.protocol.IPInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ipv4)) {
        this.ipv4 = data().deepCopy(fields()[0].schema(), other.ipv4);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ipv6)) {
        this.ipv6 = data().deepCopy(fields()[1].schema(), other.ipv6);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.proxy)) {
        this.proxy = data().deepCopy(fields()[2].schema(), other.proxy);
        fieldSetFlags()[2] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing IPInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mtty.protocol.IPInfo other) {
            super(com.mtty.protocol.IPInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.ipv4)) {
        this.ipv4 = data().deepCopy(fields()[0].schema(), other.ipv4);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ipv6)) {
        this.ipv6 = data().deepCopy(fields()[1].schema(), other.ipv6);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.proxy)) {
        this.proxy = data().deepCopy(fields()[2].schema(), other.proxy);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'ipv4' field.
      * @return The value.
      */
    public java.lang.Integer getIpv4() {
      return ipv4;
    }

    /**
      * Sets the value of the 'ipv4' field.
      * @param value The value of 'ipv4'.
      * @return This builder.
      */
    public com.mtty.protocol.IPInfo.Builder setIpv4(int value) {
      validate(fields()[0], value);
      this.ipv4 = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'ipv4' field has been set.
      * @return True if the 'ipv4' field has been set, false otherwise.
      */
    public boolean hasIpv4() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ipv4' field.
      * @return This builder.
      */
    public com.mtty.protocol.IPInfo.Builder clearIpv4() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ipv6' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getIpv6() {
      return ipv6;
    }

    /**
      * Sets the value of the 'ipv6' field.
      * @param value The value of 'ipv6'.
      * @return This builder.
      */
    public com.mtty.protocol.IPInfo.Builder setIpv6(java.util.List<java.lang.Integer> value) {
      validate(fields()[1], value);
      this.ipv6 = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'ipv6' field has been set.
      * @return True if the 'ipv6' field has been set, false otherwise.
      */
    public boolean hasIpv6() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ipv6' field.
      * @return This builder.
      */
    public com.mtty.protocol.IPInfo.Builder clearIpv6() {
      ipv6 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'proxy' field.
      * @return The value.
      */
    public java.lang.CharSequence getProxy() {
      return proxy;
    }

    /**
      * Sets the value of the 'proxy' field.
      * @param value The value of 'proxy'.
      * @return This builder.
      */
    public com.mtty.protocol.IPInfo.Builder setProxy(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.proxy = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'proxy' field has been set.
      * @return True if the 'proxy' field has been set, false otherwise.
      */
    public boolean hasProxy() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'proxy' field.
      * @return This builder.
      */
    public com.mtty.protocol.IPInfo.Builder clearProxy() {
      proxy = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public IPInfo build() {
      try {
        IPInfo record = new IPInfo();
        record.ipv4 = fieldSetFlags()[0] ? this.ipv4 : (java.lang.Integer) defaultValue(fields()[0]);
        record.ipv6 = fieldSetFlags()[1] ? this.ipv6 : (java.util.List<java.lang.Integer>) defaultValue(fields()[1]);
        record.proxy = fieldSetFlags()[2] ? this.proxy : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
