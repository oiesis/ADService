/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.mtty.protocol;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UserInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1617382875132631391L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserInfo\",\"namespace\":\"com.mtty.protocol\",\"fields\":[{\"name\":\"age\",\"type\":\"int\"},{\"name\":\"sex\",\"type\":\"int\"},{\"name\":\"interest\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int age;
  @Deprecated public int sex;
  @Deprecated public int interest;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public UserInfo() {}

  /**
   * All-args constructor.
   */
  public UserInfo(java.lang.Integer age, java.lang.Integer sex, java.lang.Integer interest) {
    this.age = age;
    this.sex = sex;
    this.interest = interest;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return age;
    case 1: return sex;
    case 2: return interest;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: age = (java.lang.Integer)value$; break;
    case 1: sex = (java.lang.Integer)value$; break;
    case 2: interest = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'sex' field.
   */
  public java.lang.Integer getSex() {
    return sex;
  }

  /**
   * Sets the value of the 'sex' field.
   * @param value the value to set.
   */
  public void setSex(java.lang.Integer value) {
    this.sex = value;
  }

  /**
   * Gets the value of the 'interest' field.
   */
  public java.lang.Integer getInterest() {
    return interest;
  }

  /**
   * Sets the value of the 'interest' field.
   * @param value the value to set.
   */
  public void setInterest(java.lang.Integer value) {
    this.interest = value;
  }

  /**
   * Creates a new UserInfo RecordBuilder.
   * @return A new UserInfo RecordBuilder
   */
  public static com.mtty.protocol.UserInfo.Builder newBuilder() {
    return new com.mtty.protocol.UserInfo.Builder();
  }
  
  /**
   * Creates a new UserInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserInfo RecordBuilder
   */
  public static com.mtty.protocol.UserInfo.Builder newBuilder(com.mtty.protocol.UserInfo.Builder other) {
    return new com.mtty.protocol.UserInfo.Builder(other);
  }
  
  /**
   * Creates a new UserInfo RecordBuilder by copying an existing UserInfo instance.
   * @param other The existing instance to copy.
   * @return A new UserInfo RecordBuilder
   */
  public static com.mtty.protocol.UserInfo.Builder newBuilder(com.mtty.protocol.UserInfo other) {
    return new com.mtty.protocol.UserInfo.Builder(other);
  }
  
  /**
   * RecordBuilder for UserInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserInfo>
    implements org.apache.avro.data.RecordBuilder<UserInfo> {

    private int age;
    private int sex;
    private int interest;

    /** Creates a new Builder */
    private Builder() {
      super(com.mtty.protocol.UserInfo.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mtty.protocol.UserInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.age)) {
        this.age = data().deepCopy(fields()[0].schema(), other.age);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sex)) {
        this.sex = data().deepCopy(fields()[1].schema(), other.sex);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.interest)) {
        this.interest = data().deepCopy(fields()[2].schema(), other.interest);
        fieldSetFlags()[2] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing UserInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mtty.protocol.UserInfo other) {
            super(com.mtty.protocol.UserInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.age)) {
        this.age = data().deepCopy(fields()[0].schema(), other.age);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sex)) {
        this.sex = data().deepCopy(fields()[1].schema(), other.sex);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.interest)) {
        this.interest = data().deepCopy(fields()[2].schema(), other.interest);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public java.lang.Integer getAge() {
      return age;
    }

    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public com.mtty.protocol.UserInfo.Builder setAge(int value) {
      validate(fields()[0], value);
      this.age = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public com.mtty.protocol.UserInfo.Builder clearAge() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sex' field.
      * @return The value.
      */
    public java.lang.Integer getSex() {
      return sex;
    }

    /**
      * Sets the value of the 'sex' field.
      * @param value The value of 'sex'.
      * @return This builder.
      */
    public com.mtty.protocol.UserInfo.Builder setSex(int value) {
      validate(fields()[1], value);
      this.sex = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'sex' field has been set.
      * @return True if the 'sex' field has been set, false otherwise.
      */
    public boolean hasSex() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sex' field.
      * @return This builder.
      */
    public com.mtty.protocol.UserInfo.Builder clearSex() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'interest' field.
      * @return The value.
      */
    public java.lang.Integer getInterest() {
      return interest;
    }

    /**
      * Sets the value of the 'interest' field.
      * @param value The value of 'interest'.
      * @return This builder.
      */
    public com.mtty.protocol.UserInfo.Builder setInterest(int value) {
      validate(fields()[2], value);
      this.interest = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'interest' field has been set.
      * @return True if the 'interest' field has been set, false otherwise.
      */
    public boolean hasInterest() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'interest' field.
      * @return This builder.
      */
    public com.mtty.protocol.UserInfo.Builder clearInterest() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public UserInfo build() {
      try {
        UserInfo record = new UserInfo();
        record.age = fieldSetFlags()[0] ? this.age : (java.lang.Integer) defaultValue(fields()[0]);
        record.sex = fieldSetFlags()[1] ? this.sex : (java.lang.Integer) defaultValue(fields()[1]);
        record.interest = fieldSetFlags()[2] ? this.interest : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
